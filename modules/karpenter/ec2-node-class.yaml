apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: default2
spec:
  amiFamily: AL2023
  amiSelectorTerms:
    # Latest AL2023 EKS 1.32 AMIs for x86_64 and ARM64
    - name: "amazon-eks-node-al2023-x86_64-standard-1.32-*"
      owner: "602401143452"
    - name: "amazon-eks-node-al2023-arm64-standard-1.32-*"
      owner: "602401143452"

  instanceProfile: karpenter-node-instance-profile-opsfleet

  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: opsfleet

  securityGroupSelectorTerms:
    - tags:
        kubernetes.io/cluster/opsfleet: owned

  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 20Gi
        volumeType: gp3
        deleteOnTermination: true

  tags:
    karpenter.sh/discovery: opsfleet
    karpenter.sh/servers: newnode


  userData: |
    #!/bin/bash
    set -xe

    TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" \
    -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")


    REGION=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" \
    http://169.254.169.254/latest/meta-data/placement/region)


    CLUSTER_NAME="opsfleet"


    API_SERVER=$(aws eks describe-cluster \
    --region $REGION \
    --name $CLUSTER_NAME \
    --query "cluster.endpoint" \
    --output text)

    CA_CERT=$(aws eks describe-cluster \
    --region $REGION \
    --name $CLUSTER_NAME \
    --query "cluster.certificateAuthority.data" \
    --output text)

    cat <<EOF >/etc/eks/nodeadm.yaml
    apiVersion: node.eks.aws/v1alpha1
    kind: NodeConfig
    spec:
      cluster:
        name: $CLUSTER_NAME
        cidr: 172.20.0.0/16
        dnsServiceIP: 10.100.0.0/16
        apiServerEndpoint: $API_SERVER
        certificateAuthority: |
          $CA_CERT
      kubelet:
        extraArgs:
          node-labels: karpenter.sh/discovery=opsfleet,karpenter.sh/nodepool=default,kubernetes.io/cluster/opsfleet=owned,karpenter.sh/nodepool: newnode

    EOF

    /usr/bin/nodeadm init --config-source file:///etc/eks/nodeadm.yaml
